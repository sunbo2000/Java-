## 有效字母位异位词



定义int型数组记录第一个串每个字母出现次数,第二个串去比对

```java
    public boolean isAnagram(String s, String t) {
        if (s.length() != t.length()) {
            return false;
        }
        int[] num = new int[26];
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            ++num[c - 'a'];
        }

        for (int i = 0; i < t.length(); i++) {
            char c = t.charAt(i);
            if (num[c - 'a'] <= 0) {
                return false;
            }
            --num[c - 'a'];
        }
        return true;
    }
```



## 两个数组的交集

用 set 集合得出数组一的元素集合, 遍历数组2,set中包含的元素添加到结果集中

```java
     public int[] intersection(int[] nums1, int[] nums2) {

        Set<Integer> set = new HashSet<>();
        for (int i : nums1) {
            set.add(i);
        }

        Set<Integer> resultSet = new HashSet<>();

        for (int j : nums2) {
            if (set.contains(j)) {
                resultSet.add(j);
            }
        }
        return resultSet.stream().mapToInt(i -> i).toArray();
    }
```



数据大小有限的情况下用 int[] hash = new int[1000] 得出数组一集合

```java
    public int[] intersection1(int[] nums1, int[] nums2) {
        boolean[] hash = new boolean[1000];
        for (int i : nums1) {
            hash[i] = true;
        }

        List<Integer> list = new ArrayList<>();
        for (int i : nums2) {
            if (hash[i]) {
                list.add(i);
                hash[i] = false;
            }
        }
        return list.stream().mapToInt(i->i).toArray();
    }
```



## 快乐数

「快乐数」 定义为：

- 对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。
- 然后重复这个过程**直到这个数变为 1，也可能是 无限循环 但始终变不到 1。**
- 如果这个过程 结果为 1，那么这个数就是快乐数

> 可能是无限循环或者变为 1,仅仅去判断 1 是不明智的,因为如果是无限循环的话永远也不会为1,所以我们应该在判断是不是1的同时判断是否为无限循环,两种方法:
>
> 1.用集合,将每次的sum都放入集合中,有重复出现的元素即代表出现了循环,返回false,中途出现1返回true;
>
> 2.用快慢指针判断是否出现循环,快指针与慢指针相同时即出现循环,相同时值为1返回true

集合

```java
public boolean isHappy(int n) {
        Set<Integer> set = new HashSet<>();
        int sum = 0;
        while (true) {
            while (n != 0) {
                sum += (n % 10) * (n % 10);
                n = n / 10;
            }
            if (sum == 1) {
                return true;
            }

            if (set.contains(sum)) {
                return false;
            }

            set.add(sum);
            n = sum;
            sum = 0;
        }

    }
```



快慢指针

```java
	 public boolean isHappy1(int n) {
        int fast = n;
        int slow = n;

        do {
            fast = getBitSum(fast);
            fast = getBitSum(fast);
            slow = getBitSum(slow);
        } while (fast != slow);

        if (fast == 1) {
            return true;
        }
        return false;
    }

    private int getBitSum(int num) {
        int sum = 0;
        while (num != 0) {
            sum += (num % 10) * (num % 10);
            num = num / 10;
        }
        return sum;
    }

```



## 两数之和

给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。

你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。

**示例:**

给定 nums = [2, 7, 11, 15], target = 9

因为 nums[0] + nums[1] = 2 + 7 = 9

所以返回 [0, 1]



> 思路: 能想到遍历一遍数组,用 target 减去元素值,判断差值存不存在于数组中.重要的是这个判断过程,用哈希结构遍历一遍数组将所有值先存起来再去判断会快很多,但是这里还需要记录数组下标,所以我们选用 map 结构的value来记录下标值



```java
    public int[] twoSum(int[] nums, int target) {
        int[] result = null;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            map.putIfAbsent(nums[i], i);
        }

        for (int i = 0; i < nums.length; i++) {
            if (map.containsKey(target - nums[i]) && map.get(target - nums[i]) != i) {
                result = new int[2];
                result[0] = i;
                result[1] = map.get(target - nums[i]);
                break;
            }
        }

        return result;
    }
```



## 四数相加

给你四个整数数组 nums1、nums2、nums3 和 nums4 ，数组长度都是 n ，请你计算有多少个元组 (i, j, k, l) 能满足：

0 <= i, j, k, l < n
nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0



思路:

我们可以将四个数组分成两部分，A 和 B 为一组，C 和 D 为另外一组。

对于 A 和 B，我们使用二重循环对它们进行遍历，得到所有 A[i]+B[j] 的值并存入哈希映射中。对于哈希映射中的每个键值对，每个键表示一种 A[i]+B[j]，对应的值为 A[i]+B[j] 出现的次数。

对于 C 和 D，我们同样使用二重循环对它们进行遍历。当遍历到 C[k]+D[l] 时，**如果 -(C[k]+D[l]) 出现在哈希映射中**，那么将 -(C[k]+D[l]) 对应的值累加进答案中。

最终即可得到满足 A[i]+B[j]+C[k]+D[l]=0 的四元组数目。



```java
    public int fourSumCount(int[] nums1, int[] nums2, int[] nums3, int[] nums4) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int k : nums1) {
            for (int i : nums2) {
                map.put(k + i, map.getOrDefault(k + i, 0) + 1);
            }
        }
        int count = 0;
        for (int i : nums3) {
            for (int j : nums4) {
                if (map.containsKey(-(i + j))) {
                    count = count + map.get(-(i + j));
                }
            }
        }

        return count;
    }
```



> 总结，看到形如：A+B....+N=0的式子，要转换为(A+...T)=-((T+1)...+N)再计算，这个T的分割点一般是一半，特殊情况下需要自行判断。定T是解题的关键。





## 赎金信



给你两个字符串：ransomNote 和 magazine ，判断 ransomNote 能不能由 magazine 里面的字符构成。

如果可以，返回 true ；否则返回 false 。

magazine 中的每个字符只能在 ransomNote 中使用一次。

> 思路: 同有效字母异位词

```java
     public boolean canConstruct(String ransomNote, String magazine) {
        int[] mag = new int[26];
        for (int i = 0; i < magazine.length(); i++) {
            int index = magazine.charAt(i) - 'a';
            mag[index]++;
        }

        for (int i = 0; i < ransomNote.length(); i++) {
            int index = ransomNote.charAt(i) - 'a';
            if (mag[index] == 0) {
                return false;
            }
            mag[index]--;
        }

        return true;
    }
```



## 三数之和

1. 特判，对于数组长度 n，如果数组为 null 或者数组长度小于 3，返回 []。 

2. 对数组进行排序。 
3. 遍历排序后数组： 
   - 若 nums[i]>0nums[i]>0：因为已经排序好，所以后面不可能有三个数加和等于 00，直接返回结果。
   - 对于重复元素：跳过，避免出现重复解
   - 令左指针 L=i+1L=i+1，右指针 R=n-1R=n−1，当 L<RL<R 时，执行循环：
     - 当 nums[i]+nums[L]+nums[R]==0nums[i]+nums[L]+nums[R]==0，执行循环，判断左界和右界是否和下一位置重复，去除重复解。并同时将 L,RL,R 移到下一位置，寻找新的解
     - 若和大于 00，说明 nums[R]nums[R] 太大，RR 左移
     - 若和小于 00，说明 nums[L]nums[L] 太小，LL 右移

> 先排序,固定第一个数,后两个用双指针处理,要求和为零,第一个数固定后,结果不为零移动左指针或右指针使其等于零

时间复杂度: o(n^2)

```java
    public List<List<Integer>> threeSum1(int[] nums) {
        if (nums == null || nums.length < 3) {
            return Collections.emptyList();
        }
        List<List<Integer>> result = new ArrayList<>();

        Arrays.sort(nums);
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > 0) {
                return result;
            }
            if (i > 0 && nums[i] == nums[i - 1]) {
                continue;
            }
            int left = i + 1;
            int end = nums.length - 1;

            int target = -nums[i];
            while (left < end) {
                if (nums[left] + nums[end] == target) {
                    result.add(new ArrayList<>(Arrays.asList(nums[i], nums[left], nums[end])));
                    // 去重复
                    left++;
                    end--;
                    while (left < end && nums[left] == nums[left - 1]) {
                        left++;
                    }
                    while (left < end && nums[end] == nums[end + 1]) {
                        end--;
                    }

                } else if (nums[left] + nums[end] < target) {
                    left++;
                } else {
                    end--;
                }
            }
        }
        return result;
    }

```





## 四数之和

和三数之和类似,但是不能因为第一个数大于 target 就退出

固定前两个数,后面两个数用双指针

时间复杂度: o(n^3)

```java
    public List<List<Integer>> fourSum(int[] nums, int target) {
        if (nums.length < 4) {
            return Collections.emptyList();
        }
        int right = 0;
        int end = nums.length - 1;
        List<List<Integer>> result = new ArrayList<>();
        Arrays.sort(nums);
        for (int i = 0; i < nums.length - 2; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) {
                continue;
            }
            for (int j = i + 1; j < nums.length - 1; j++) {
                if (j > i + 1 && nums[j] == nums[j - 1]) {
                    continue;
                }
                right = j + 1;
                end = nums.length - 1;
                while (right < end) {
                    if (nums[i] + nums[j] + nums[right] + nums[end] == target) {
                        List<Integer> list = new ArrayList<>(Arrays.asList(nums[i], nums[j], nums[right], nums[end]));
                        result.add(list);

                        right++;
                        end--;
                        while (right < end && nums[right] == nums[right - 1]) {
                            right++;
                        }
                        while (right < end && nums[end] == nums[end + 1]) {
                            end--;
                        }
                    } else if (nums[i] + nums[j] + nums[right] + nums[end] < target) {
                        right++;
                    } else {
                        end--;
                    }
                }
            }
        }
        return result;
    }
```



## 缺失的第一个正整数

[41]

**示例 2：**

```
输入：nums = [3,4,-1,1]
输出：2
```

> 缺失的第一个正整数一定在 1 - len + 1 之间诞生.
>
> 做法: 让众神归位, 每一个数都放到它应该出现的下标, 让设数值 val 应该在下标 val-1 的数组里, 整体遍历一遍之后. 再从头开始遍历, 第一个不在位子上的神就是缺失的第一个正整数
>
> 遍历的时候如果本人已经在位子上就继续.如果不在 1-N 的范围内也继续, 不交换



```java
    public int firstMissingPositive(int[] nums) {
        int len = nums.length;
        // 让众神归位, 归位后判断谁家不是本人
        // 如果 val 值小于 len, 让 val 位于下标为 val - 1 的位置 
        // 即下标0-->1, 下标1-->2
        for(int i = 0; i < nums.length; i++){
            // nums[i] 应该放在 nums[i] - 1 的位置上
            while(nums[i] > 0 && nums[i]  < len && nums[i] != nums[nums[i] - 1]){
                swap(nums, i, nums[i] - 1);
            }
        }

        // 找到一个没归位的神, 就是缺少了它
        for(int i = 0; i < len; i++){
            if(nums[i] != i + 1) return i + 1;
        }

        return len + 1;
    }

    private void swap(int[] arr, int i, int j){
        int tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }
```

